# app.py
import streamlit as st
import google.generativeai as genai
import json

# --- Configura√ß√£o da P√°gina e Estilo ---
st.set_page_config(
    page_title="ExamSynth‚Ñ¢ AI",
    page_icon="ü©∫",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilo CSS para um visual mais limpo
st.markdown("""
<style>
    .stApp {
        background-color: #F0F2F6;
    }
    .st-emotion-cache-16txtl3 {
        padding: 2rem 1rem 1rem;
    }
    .st-emotion-cache-1y4p8pa {
        padding-top: 2rem;
    }
</style>
""", unsafe_allow_html=True)


# --- PROMPT MESTRE: A Persona e as Regras do Agente de IA ---
# Este prompt transforma o Gemini no agente ExamSynth. Ele cont√©m todas as regras originais.
# A instru√ß√£o final pede uma sa√≠da em JSON para garantir um parsing robusto e confi√°vel.
EXAMSYNTH_SYSTEM_PROMPT = """
Voc√™ √© o ExamSynth‚Ñ¢ Clinical, um especialista de IA de elite em sumarizar exames para prontu√°rios. Sua √∫nica miss√£o √© receber um texto bruto de exames e transform√°-lo em um resumo cl√≠nico estruturado, seguindo rigorosamente as regras abaixo.

**PRINC√çPIOS E REGRAS GERAIS:**
1.  **Fidelidade e Formato:** Transcreva os dados originais. Use v√≠rgula como decimal (ex: 10,5). Use 'K' para milhares (ex: 340K). Resultados da mesma data devem estar na mesma linha. Use abrevia√ß√µes listadas.
2.  **An√°lise Condicional:** N√ÉO fa√ßa julgamentos de valor. Apenas sinalize com `*` se o texto fornecer um Valor de Refer√™ncia (VR) e o resultado estiver fora dele.
3.  **Estrutura de Sa√≠da:** A sa√≠da final deve ser um texto em Markdown. Comece com o Resumo Laboratorial Geral, seguido pelas Se√ß√µes Dedicadas e, por fim, o Resumo de Imagem. Use `---` como separador entre as se√ß√µes.

**M√ìDULOS DE PROCESSAMENTO:**

**M√ìDULO 1A ‚Äì RESUMO LABORATORIAL GERAL:**
- **Conte√∫do:** Exames que N√ÉO pertencem √†s se√ß√µes dedicadas.
- **Formato:** `DD/MM: [ABREV1 VAL1] [ABREV2 VAL2] | [ABREV_GRUPO_SEGUINTE VALX]...`
- **Exemplo:** `05/05: HB 13,2 HT 39,6 PLAQ 343K | UR 77,6 CR 1,22 | NA 136 K 4,9`

**M√ìDULO 1B ‚Äì SE√á√ïES LABORATORIAIS DEDICADAS:**
- **Organiza√ß√£o:** Cada se√ß√£o com seu cabe√ßalho em negrito. Resultados agrupados por data.
- **Se√ß√µes:**
    - **CARDIOVASCULAR:** (TROPONINA, CKMB, BNP, etc.)
    - **HORMONAIS:** (TSH, T4L, CORTISOL, PSA, etc.)
    - **SOROLOGIAS:** (HIV, HBsAg, AntiHBs, etc.). **Aplique interpreta√ß√µes padronizadas se o padr√£o for claro.** Ex: `(Interpreta√ß√£o: HBV Imune(Vac))` para HBsAg NR, AntiHBs R.
    - **REUMATOL√ìGICO:** (FAN, FR, AntiDNA, etc.)
    - **ANEMIA ESPEC√çFICA:** (FERRITINA, VITB12, etc.)
    - **MARCADORES TUMORAIS:** (CEA, CA 19-9, etc.)

**M√ìDULO 2 ‚Äì RESUMO DE EXAMES DE IMAGEM:**
- **Formato:** `[NOME DO EXAME EM MAI√öSCULAS] (DD/MM/AAAA): [Transcri√ß√£o da IMPRESS√ÉO ou CONCLUS√ÉO].`
- **Exemplo:** `TC DE CR√ÇNIO (15/05/2024): Sem altera√ß√µes significativas.`

**LISTA DE ABREVIA√á√ïES (Use estas):**
- **Geral:** HB, HT, PLAQ, LEU, NEU%, LIN%; UR, CR, TFG; NA, K, CA, GLI; TGO, TGP, FA, GGT; PCR, VHS; INR, TTPA.
- **Cardio:** TROPONINA I, TROPONINA T, CKMB, BNP, PROBNP.
- **Hormonal:** TSH, T4L, PSA T, PSA L, CORTAM.
- **Sorologia:** HIV12, HBsAg, AntiHBs, AntiHBc TOTAL, VDRL.
- **Reumato:** FAN, FR, AntiDNA, C3, C4.
- **Anemia:** FERR, SATTRANSF, VITB12, FOLATO S.
- **Onco:** CEA, CA 19-9, CA 125, AFP.

**TAREFA FINAL E FORMATO DE SA√çDA OBRIGAT√ìRIO:**
Analise o texto fornecido pelo usu√°rio. Mesmo que seja ca√≥tico, extraia o m√°ximo de informa√ß√µes poss√≠vel. Gere um objeto JSON contendo duas chaves:
1.  `"structured_summary"`: Uma string contendo o resumo cl√≠nico completo e final em formato Markdown, seguindo todas as regras e a ordem dos m√≥dulos.
2.  `"parsing_log"`: Uma string descrevendo em bullet points quais informa√ß√µes voc√™ conseguiu extrair e, mais importante, quais linhas ou dados voc√™ ignorou por n√£o conseguir interpretar ou por n√£o se encaixarem nas categorias. Seja transparente sobre suas limita√ß√µes.

**N√ÉO ESCREVA NADA AL√âM DO OBJETO JSON.**
"""

# --- FUN√á√ÉO DO AGENTE DE IA ---
def chamar_agente_gemini(api_key, texto_clinico):
    """
    Invoca o agente Gemini para processar o texto cl√≠nico.
    Retorna o resumo estruturado e o log de parsing.
    """
    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel(
            model_name="gemini-1.5-pro-latest",
            system_instruction=EXAMSYNTH_SYSTEM_PROMPT
        )
        # O prompt para o modelo √© apenas o texto do usu√°rio
        response = model.generate_content(texto_clinico)

        # Limpa a sa√≠da para garantir que seja um JSON v√°lido
        cleaned_response = response.text.strip().replace("```json", "").replace("```", "")
        
        # Tenta parsear a resposta como JSON
        data = json.loads(cleaned_response)
        summary = data.get("structured_summary", "Erro: Chave 'structured_summary' n√£o encontrada na resposta da IA.")
        log = data.get("parsing_log", "Erro: Chave 'parsing_log' n√£o encontrada na resposta da IA.")
        
        return summary, log

    except Exception as e:
        st.error(f"Ocorreu um erro ao chamar a API do Gemini: {e}")
        error_details = f"Resposta bruta da API (pode conter erros):\n\n{response.text if 'response' in locals() else 'Nenhuma resposta recebida.'}"
        return "Falha ao gerar o resumo.", error_details


# --- INTERFACE DO STREAMLIT ---

# --- BARRA LATERAL (CONTROLES) ---
with st.sidebar:
    st.image("https://i.imgur.com/2g1L2d2.png", width=250) # Logotipo fict√≠cio
    st.header("Configura√ß√£o do Agente")

    # Entrada da API Key
    try:
        api_key = st.secrets["GEMINI_API_KEY"]
        st.success("API Key do Gemini carregada com sucesso!", icon="‚úÖ")
    except (FileNotFoundError, KeyError):
        st.warning("API Key n√£o encontrada nos segredos.", icon="‚ö†Ô∏è")
        api_key = st.text_input("Insira sua API Key do Gemini aqui:", type="password", help="Obtenha sua chave no Google AI Studio.")

    st.divider()
    
    st.header("Fonte dos Dados")
    input_source = st.radio("Escolha como fornecer os dados:", ("Colar Texto", "Fazer Upload de Arquivo .txt"), horizontal=True)
    
    text_input = ""
    if input_source == "Colar Texto":
        text_input = st.text_area("Cole o texto bruto dos exames aqui:", height=250)
    else:
        uploaded_file = st.file_uploader("Selecione um arquivo .txt", type=['txt'])
        if uploaded_file:
            text_input = uploaded_file.getvalue().decode("utf-8")

    gerar_btn = st.button("‚ú® Gerar Resumo Cl√≠nico", use_container_width=True, type="primary")

# --- √ÅREA PRINCIPAL (RESULTADOS) ---
st.title("Painel ExamSynth‚Ñ¢ AI ü©∫")
st.markdown("##### Clarity from Complexity. Insight from Data.")
st.divider()

if gerar_btn:
    if not api_key:
        st.error("A API Key do Gemini √© obrigat√≥ria para continuar.")
    elif not text_input.strip():
        st.warning("Por favor, forne√ßa os dados dos exames para an√°lise.")
    else:
        with st.spinner("O Agente ExamSynth‚Ñ¢ AI est√° analisando os dados... Por favor, aguarde."):
            summary, log = chamar_agente_gemini(api_key, text_input)
            st.session_state.summary = summary
            st.session_state.log = log

if 'summary' in st.session_state and st.session_state.summary:
    st.success("An√°lise conclu√≠da com sucesso!")
    
    col1, col2 = st.columns(2, gap="large")

    with col1:
        with st.container(border=True):
            st.subheader("üìÑ Resumo Cl√≠nico Gerado")
            st.markdown(st.session_state.summary)
            st.download_button(
                label="üì• Baixar Resumo (.md)",
                data=st.session_state.summary,
                file_name="ExamSynth_Resumo.md",
                mime="text/markdown",
                use_container_width=True
            )

    with col2:
        with st.container(border=True):
            st.subheader("‚öôÔ∏è Log de An√°lise do Agente")
            st.markdown(st.session_state.log)
else:
    st.info("Aguardando dados para an√°lise. Configure na barra lateral e clique em 'Gerar Resumo'.")
